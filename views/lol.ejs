<html>

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="icon" type="image/jpeg" href="https://i.imgur.com/Z52wJgg.jpg">
    <link rel="stylesheet" href="https://cdn.plyr.io/3.6.12/plyr.css" />
    <!-- Favicon -->
    <script "text/javascript" src="https://cdn.plyr.io/3.6.12/plyr.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Poppins|Quattrocento+Sans" rel="stylesheet" />
    <script "text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/dashjs/3.1.3/dash.all.min.js"></script>
    <script "text/javascript" src="https://cdn.jsdelivr.net/npm/hls.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
    <title>PKV VIDEO PLAYER</title>
    <style type="text/css" media="screen">
        html {
            font-family: Poppins;
            background: #0A0909;
            margin: 0;
            padding: 0;
            --plyr-color-main: #1ac266;
        }

        .logo-container {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 60px;
            height: 60px;
        }

        .plyr {
            height: 100%;
            width: 100%;
        }

        #logo {
            position: fixed;
            background-image: url("https://i.imgur.com/Z52wJgg.jpg");
            background-size: contain;
            background-position: center;
        }

        .float {
            height: 60px;
            width: 60px;
            z-index: 10;
            border-radius: 50px;
            box-shadow: 2px 2px 3px #999;
        }

        .label-container {
            position: relative;
            top: 5px;
            left: 70px;
            display: table;
            visibility: hidden;
        }

        .label-text {
            color: #FFF;
            background: rgba(51, 51, 51, 0.5);
            display: table-cell;
            vertical-align: middle;
            padding: 10px;
            border-radius: 3px;
        }

        .label-arrow {
            display: table-cell;
            vertical-align: middle;
            color: #333;
            opacity: 0.5;
            transform: scaleX(-1);
        }

        a.float+div.label-container {
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s, opacity 0.5s ease;
        }

        a.float:hover+div.label-container {
            visibility: visible;
            opacity: 1;
        }


        .loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000;
            z-index: 9999;
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .circle {
            width: 20px;
            height: 20px;
            margin: 10px;
            border-radius: 50%;
            animation: loader-animation 0.75s ease infinite;
        }

        .circle:nth-child(1) {
            background-color: #D90429;
            animation-delay: 0s;
        }

        .circle:nth-child(2) {
            background-color: #FFA300;
            animation-delay: 0.15s;
        }

        .circle:nth-child(3) {
            background-color: #048BA8;
            animation-delay: 0.3s;
        }

        @keyframes loader-animation {
            0% {
                transform: scale(0);
                opacity: 0.7;
            }

            100% {
                transform: scale(1);
                opacity: 0;
            }
        }
    </style>
</head>

<body>
    <div id="loading" class="loading">
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
    </div>
    <video controls crossorigin playsinline id="videoContainer" style="background-color: #0A0909;">
        <!-- <source src="https://d1d34p8vz63oiq.cloudfront.net/4768b598-7e30-4c2e-bff9-ab6c6337cc44/master.mpd"> -->
    </video>


    <!-- <script>
        const video = document.getElementById("videoContainer");
        document.addEventListener("DOMContentLoaded", function () {
            const source = "https://d1d34p8vz63oiq.cloudfront.net/4768b598-7e30-4c2e-bff9-ab6c6337cc44/master.mpd";
            const dash = dashjs.MediaPlayer().create();
            var defaultOptions = {
                controls: ['rewind', 'play', 'fast-forward', 'progress', 'current-time', 'mute', 'volume', 'settings', 'fullscreen', 'keyboard'],
                "autoplay": false,
                "muted": false,
                "loop": {
                    "active": false
                },
                speed: {
                    selected: 1,
                    options: [1, 1.25, 1.5, 2, 2.5, 3, 3.25, 3.5, 4]
                },
                "captions": {
                    "active": true,
                    "update": true
                }
            };
            dash.initialize(video, source, false);
            dash.updateSettings({
                streaming: {
                    abr: {
                        autoSwitchBitrate: {
                            audio: false,
                            video: false
                        }
                    },
                    fastSwitchEnabled: true,
                    lowLatencyEnabled: true
                }
            });
            // {"keys":[{"kty":"oct","k":"n3zHXMVRMmA0wsIa1l6eOg","kid":"hTKBch7M0CiZgf-5mXkknQ"}],"type":"temporary"}
            const protData = {
                "org.w3.clearkey": {
                    "clearkeys": {
                        "w9TpIOHhmHQ7ZNWI_jJMXw": "UMGX9qEhZMtKFKtWlBfKgQ"
                    }
                }
            };
            dash.setProtectionData(protData);
            dash.on("streamInitialized", function () {
                const bodyElement = document.querySelector("body");
                const loadingElement = document.getElementById("loading");
                loadingElement.style.display = "none";
                bodyElement.style.visibility = "visible";
                const availableQualities = dash.getBitrateInfoListFor("video").map((l) => l.height);
                defaultOptions.quality = {
                    default: availableQualities[0].height,
                    options: availableQualities,
                    forced: true,
                    onChange: function (newQuality) {
                        dash.getBitrateInfoListFor("video").forEach((level, levelIndex) => {
                            if (level.height === newQuality) {
                                dash.setQualityFor("video", level.qualityIndex);
                            }
                        });
                    },
                };
                defaultOptions.previewThumbnails = {
                    enabled: true,
                    src: 'https://d1d34p8vz63oiq.cloudfront.net/4768b598-7e30-4c2e-bff9-ab6c6337cc44/master.mpd'
                };
                defaultOptions.tooltips = { controls: true, seek: true };
                const player = new Plyr(video, defaultOptions);
                window.player = player;
                window.dash = dash;
            });
            dash.attachView(video);
        });
    </script> -->

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const video = document.querySelector("video");
            const controls = [
                "rewind",
                "play",
                "fast-forward",
                "progress",
                "current-time",
                "settings",
                "fullscreen",
                'pip',
                'airplay',
                "keyboard",
            ];
            //   https://studyrays.site/player/file.php?vid=7029ce65-7e30-49de-bdc8-524f7d3454ac&quality=240&ex=.m3u8
            const sources = {
                240: "https://studyrays.site/player/file.php?vid=7029ce65-7e30-49de-bdc8-524f7d3454ac&quality=240&ex=.m3u8",
                360: "https://studyrays.site/player/file.php?vid=7029ce65-7e30-49de-bdc8-524f7d3454ac&quality=360&ex=.m3u8",
                480: "https://studyrays.site/player/file.php?vid=7029ce65-7e30-49de-bdc8-524f7d3454ac&quality=480&ex=.m3u8",
                720: "https://studyrays.site/player/file.php?vid=7029ce65-7e30-49de-bdc8-524f7d3454ac&quality=720&ex=.m3u8",
            };

            const player = new Plyr(video, {
                controls: controls,
                settings: ["quality", "speed"],
                autoplay: true,
                speed: {
                    selected: 1,
                    options: [
                        0.5, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3
                    ],
                },
                quality: {
                    default: "240",
                    options: ["240", "360", "480", "720"],
                    forced: true,
                    onChange: (newQuality) => {
                        const sourceUrl = sources[newQuality];
                        if (Hls.isSupported()) {
                            const hls = new Hls();
                            hls.loadSource(sourceUrl);
                            hls.attachMedia(video);
                        } else if (video.canPlayType("application/vnd.apple.mpegurl")) {
                            video.src = sourceUrl;
                        }
                    },
                },
            });

            // Expose player so it can be used from the console
            window.player = player;
        });


        document.addEventListener('DOMContentLoaded', () => {
            // Listen for the full-screen change event
            document.addEventListener('fullscreenchange', () => {
                if (document.fullscreenElement) {
                    // Entered full-screen mode, try to lock the screen orientation
                    if (screen.orientation && screen.orientation.lock) {
                        screen.orientation.lock('landscape').catch(error => {
                            console.error('Error locking screen orientation:', error);
                        });
                    }
                } else {
                    // Exited full-screen mode, try to unlock the screen orientation
                    if (screen.orientation && screen.orientation.unlock) {
                        screen.orientation.unlock().catch(error => {
                            console.error('Error unlocking screen orientation:', error);
                        });
                    }
                }
            });
        });
    </script>



</body>

</html>


<!-- <?php
    header('Access-Control-Allow-Origin: *');
    header('Access-Control-Allow-Methods: GET');
    header("Access-Control-Allow-Headers: X-Requested-With");

    if (isset($_GET["url"])) {
        $url = $_GET["url"];
        if (filter_var($url, FILTER_VALIDATE_URL)) {
            echo file_get_contents($url);
        } else {
            http_response_code(500);
            header('Content-Type: application/json; charset=utf-8');
            $error = array(
                "error" => "invalid url"
            );
            die (json_encode($error));    
        }
    } else {
        http_response_code(404);
        header('Content-Type: application/json; charset=utf-8');
        $error = array(
            "error" => "please specify an url"
        );
        die (json_encode($error));
    } -->